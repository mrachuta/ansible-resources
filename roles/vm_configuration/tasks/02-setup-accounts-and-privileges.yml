---
- name: "[02.01] Get existing users"
  ansible.builtin.getent:
    database: passwd
  tags:
    - always
    - vmc.setup-accounts-and-privileges
    - vmc.02.01

- name: "[02.02] Get existing groups"
  ansible.builtin.getent:
    database: group
  tags:
    - always
    - vmc.setup-accounts-and-privileges
    - vmc.02.02

- name: "[02.03] Remove root password"
  when: vm_configuration_remove_root_password | bool
  ansible.builtin.user:
    name: root
    password_lock: true
  tags:
    - always
    - vmc.setup-accounts-and-privileges
    - vmc.02.03

- name: "[02.04] Generate password for default user"
  when: vm_configuration_create_default_user | bool and vm_configuration_default_user not in getent_passwd.keys()
  ansible.builtin.set_fact:
    generated_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters,digits') }}"
  tags:
    - always
    - vmc.setup-accounts-and-privileges
    - vmc.02.04

- name: "Create technical user and reconfigure it"
  when: vm_configuration_create_technical_user | bool
  block:
    - name: "[02.05] Create technical user"
      ansible.builtin.user:
        name: "{{ vm_configuration_technical_user }}"
        shell: /bin/bash
        state: present
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.05

    - name: "[02.06] Add technical user to sudo"
      when: "'sudo' in getent_group.keys()"
      ansible.builtin.user:
        name: "{{ vm_configuration_technical_user }}"
        groups: sudo
        state: present
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.06

    - name: "[02.07] Add technical user to wheel"
      when: "'wheel' in getent_group.keys()"
      ansible.builtin.user:
        name: "{{ vm_configuration_technical_user }}"
        groups: wheel
        state: present
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.07

    - name: "[02.08] Set authorized key for technical user"
      when: vm_configuration_technical_user_ssh_key_path is not none
      ansible.posix.authorized_key:
        user: "{{ vm_configuration_technical_user }}"
        state: present
        key: "{{ lookup('file', vm_configuration_technical_user_ssh_key_path) }}"
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.08

- name: "Create default user and reconfigure it"
  when: vm_configuration_create_default_user | bool
  block:
    # Create user and allow to alter params
    - name: "[02.09] Create default user"
      ansible.builtin.user:
        name: "{{ vm_configuration_default_user }}"
        state: present
        shell: /bin/bash
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.09

    - name: "[02.10] Add default user to sudo"
      when: "(vm_configuration_add_default_user_to_sudo | bool) and ('sudo' in getent_group.keys())"
      ansible.builtin.user:
        name: "{{ vm_configuration_default_user }}"
        groups: sudo
        state: present
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.10

    - name: "[02.11] Add default user to wheel"
      when: "(vm_configuration_add_default_user_to_sudo | bool) and ('wheel' in getent_group.keys())"
      ansible.builtin.user:
        name: "{{ vm_configuration_default_user }}"
        groups: wheel
        state: present
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.11

    # Do not change password if user already exist
    - name: "[02.12] Alter default user password"
      when: vm_configuration_default_user not in getent_passwd.keys()
      ansible.builtin.user:
        name: "{{ vm_configuration_default_user }}"
        password: "{{ generated_password | password_hash('sha512') }}"
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.12

    - name: "[02.13] Set authorized key for default user"
      when: vm_configuration_default_user_ssh_key_path is not none
      ansible.posix.authorized_key:
        user: "{{ vm_configuration_default_user }}"
        state: present
        key: "{{ lookup('file', vm_configuration_default_user_ssh_key_path) }}"
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.13

- name: "[02.14] Check if password to default user saved locally"
  when: vm_configuration_create_default_user | bool and vm_configuration_default_user not in getent_passwd.keys()
  delegate_to: localhost
  become: false
  ansible.builtin.stat:
    path: "{{ vm_configuration_default_user_password_download_path }}"
  register: password_file
  tags:
    - always
    - vmc.setup-accounts-and-privileges
    - vmc.02.14

- name: Download file with password to local machine
  when: vm_configuration_create_default_user | bool and vm_configuration_default_user not in getent_passwd.keys() and not password_file.stat.exists
  block:
    - name: "[02.15] Save password to file"
      ansible.builtin.copy:
        content: "{{ generated_password }}"
        dest: "/tmp/{{ vm_configuration_default_user }}_password"
        mode: "0600"
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.15

    - name: "[02.16] Download file with password to local machine"
      ansible.builtin.fetch:
        src: /tmp/{{ vm_configuration_default_user }}_password
        dest: "{{ vm_configuration_default_user_password_download_path }}"
        flat: true
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.16

    - name: "[02.17] Restrict access to password file on local machine"
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ vm_configuration_default_user_password_download_path }}"
        owner: "root"
        group: "root"
        mode: '0600'
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.17

  always:
    - name: "[02.18] Remove file with password"
      ansible.builtin.file:
        path: "/tmp/{{ vm_configuration_default_user }}_password"
        state: absent
      tags:
        - always
        - vmc.setup-accounts-and-privileges
        - vmc.02.18
